package XML::Parser::Class;

use true;
use XML::Parser::Expat;
use 5.01;

sub new {
  my($package) = shift;
  my $p;
  my $s = {parser => ($p = XML::Parser::Expat->new),
	     };
  {no strict 'refs';
     while (my ($symbol_table_key, $val) = each %{ *{ "$package\::" } }) {
       # iterate over the symboltable
       local *ENTRY = $val;
       if (defined $val and defined *ENTRY{ CODE }) {
	 given($symbol_table_key){
	   when(/^(Start|End)(.*)$/){$s->{"_\l$1"}->{$2}=*ENTRY{ CODE }}
	 }
       }
     }
 }
  my @handlers;
  push @handlers, 'Start', sub {
    if (my $sub = $s->{_start}{$_[1]}) {
      $sub->(@_)
    }
  } if(exists $s->{_start});


  push @handlers, 'End', sub {
    if (my $sub = $s->{_end}{$_[1]}) {
      $sub->(@_)
    }
  } if(exists $s->{_end});

  $p->setHandlers(@handlers);
  return bless($s,$package);
}

sub parse{
  my $s=shift;
  $s->{parser}->parse(@_)
}
